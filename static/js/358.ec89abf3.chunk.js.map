{"version":3,"file":"static/js/358.ec89abf3.chunk.js","mappings":"qRAEaA,EAAYC,EAAAA,EAAAA,GAAH,uEAMTC,EAAYD,EAAAA,EAAAA,GAAH,8CAITE,EAAiBF,EAAAA,EAAAA,IAAH,sE,SCTdG,EAAc,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAC7B,OACI,8BACoB,IAAnBA,EAAQC,QAAe,SAACH,EAAD,CAAgBI,IAAKC,EAAQ,MAAmCC,IAAI,uBACvF,wBACEJ,EAAQK,KAAI,gBAAEC,EAAF,EAAEA,OAAQC,EAAV,EAAUA,QAASC,EAAnB,EAAmBA,GAAnB,OACb,UAACb,EAAD,YACI,UAACE,EAAD,sBAAoBS,MACpB,uBAAIC,MAFQC,EADH,OAQtB,E,UCiBD,EA3BgB,WACZ,IAAOC,GAAWC,EAAAA,EAAAA,MAAXD,QACP,GAAwCE,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,WAEN,IAAMC,EAAgB,mCAAG,oGAErBF,GAAa,GAFQ,UAGSG,EAAAA,EAAAA,IAAqBT,GAASU,MAAK,SAAAC,GAAG,OAAIA,CAAJ,IAH/C,OAGfC,EAHe,OAIrBR,EAAgBQ,GAChBN,GAAa,GALQ,gDAOrBO,QAAQC,IAAI,KAAMC,SAPG,yDAAH,qDAUtBP,GACC,GAAE,CAACR,KAGJ,8BACCK,GAAY,SAAC,IAAD,KAAc,SAACf,EAAD,CAAaC,QAASY,KAGxD,C,gFC7BYa,E,QAAS7B,EAAAA,IAAH,sG,SCCN8B,EAAU,WACnB,OACE,SAACD,EAAD,WACE,SAAC,KAAD,CACCE,MAAM,OACNC,MAAM,MACNC,SAAS,EACTC,UAAU,2BAIhB,C,mMCZHC,EAAAA,GAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAA4B,mCAAG,oGAEjBD,EAAAA,GAAAA,IAAA,mCAAsCE,qCAFrB,cAElCC,EAFkC,gBAG3BA,EAASC,KAAKC,QAHa,mFAAH,qDAM5BC,EAAmB,mCAAG,WAAO7B,GAAP,uFACRuB,EAAAA,GAAAA,IAAA,gBAAmBvB,EAAnB,oBAAiCyB,mCAAjC,oBADQ,cACzBC,EADyB,gBAElBA,EAASC,KAFS,mFAAH,sDAKnBG,EAAkB,mCAAG,WAAO9B,GAAP,uFACPuB,EAAAA,GAAAA,IAAA,gBAAmBvB,EAAnB,4BAAyCyB,mCAAzC,oBADO,cACxBC,EADwB,gBAEjBA,EAASC,KAAKI,KAFG,mFAAH,sDAKlBrB,EAAoB,mCAAG,WAAOV,GAAP,uFACTuB,EAAAA,GAAAA,IAAA,gBAAmBvB,EAAnB,4BAAyCyB,mCAAzC,2BADS,cAC1BC,EAD0B,yBAEzBA,EAASC,KAAKC,SAFW,2CAAH,sDAKpBI,EAAyB,mCAAG,WAAOC,GAAP,uFACdV,EAAAA,GAAAA,IAAA,+BAAkCE,mCAAlC,wCAA+FQ,IADjF,cAC/BP,EAD+B,yBAE9BA,EAASC,KAAKC,SAFgB,2CAAH,qD","sources":["components/Reviews/ReviewsList.styled.js","components/Reviews/ReviewsList.jsx","components/Reviews/Reviews.jsx","components/Spiner/Spiner.styled.js","components/Spiner/Spiner.jsx","services/api.js"],"sourcesContent":["import styled from \"@emotion/styled\";\n\nexport const MovieItem = styled.li`\n&:not(:last-child) {\nmargin-bottom: 20px;\n}\n`\n\nexport const ItemTitle = styled.h3`\nmargin-bottom: 10px;\n`\n\nexport const NoResultsImage = styled.img`\nmargin: 0 auto;\nwidth: 35%;\nheight: 300px;\n`\n","import PropTypes from 'prop-types'\nimport { ItemTitle, NoResultsImage, MovieItem } from \"./ReviewsList.styled\"\n\nexport const ReviewsList = ({reviews}) => {\nreturn (\n    <>\n    {reviews.length === 0 ? <NoResultsImage src={require('../../img/sorry-no-results.png')} alt=\"Sorry, no results\" /> :\n        (<ul>\n          {reviews.map(({author, content, id}) => (\n          <MovieItem key={id}>\n              <ItemTitle>Author: {author}</ItemTitle> \n              <p>{content}</p>\n              </MovieItem>))}\n          </ul>)}\n    </>\n)\n}\n\nReviewsList.propTypes = {\n    reviews: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.string,\n            author: PropTypes.string,\n            content: PropTypes.string,\n          }).isRequired,\n    ).isRequired,\n    }","import { useState, useEffect } from \"react\"\nimport { useParams } from \"react-router-dom\"\nimport { makeReviewApiReguest } from \"../../services/api\"\nimport { ReviewsList } from \"./ReviewsList\"\nimport { Spinner } from \"../../components/Spiner/Spiner\"\n\nconst Reviews = () => {\n    const {movieId} = useParams()\n    const [movieReviews, setMovieReviews] = useState([])\n    const [isLoading, setIsLoading] = useState(false)\n\n    useEffect(() => {\n\n        const onRequestHandler = async () => {\n          try {\n            setIsLoading(true)\n            const getMovieReviews = await makeReviewApiReguest(movieId).then(res => res)\n            setMovieReviews(getMovieReviews)\n            setIsLoading(false)\n          } catch (error) {\n            console.log(error.message)\n          }\n        }\n        onRequestHandler()\n        }, [movieId])\n\n    return (\n        <> \n        {isLoading ? <Spinner /> : <ReviewsList reviews={movieReviews}/>} \n     </>\n    )\n}\n\nexport default Reviews","import styled from \"@emotion/styled\"\n\nexport const Loader = styled.div`\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%)\n`","import { FallingLines } from 'react-loader-spinner'\nimport { Loader } from \"../Spiner/Spiner.styled\";\n\nexport const Spinner = () => {\n    return (\n      <Loader>\n        <FallingLines\n         color='#000'\n         width=\"200\"\n         visible={true}\n         ariaLabel='falling-lines-loading'\n        />\n      </Loader>\n    );\n  };\n\n","import axios from \"axios\"\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/'\n\nexport const makeTrendingMoviesApiRequest = async () => {\n   \n    const response = await axios.get(`trending/all/day?api_key=${process.env.REACT_APP_API_KEY}`)\n    return await response.data.results\n}\n\nexport const makeMovieApiReguest = async (id) => {\n    const response = await axios.get(`movie/${id}?api_key=${process.env.REACT_APP_API_KEY}&language=en-US`)\n    return await response.data\n}\n\nexport const makeCastApiReguest = async (id) => {\n    const response = await axios.get(`movie/${id}/credits?api_key=${process.env.REACT_APP_API_KEY}&language=en-US`)\n    return await response.data.cast\n}\n\nexport const makeReviewApiReguest = async (id) => {\n    const response = await axios.get(`movie/${id}/reviews?api_key=${process.env.REACT_APP_API_KEY}&language=en-US&page=1`)  \n    return response.data.results\n}\n\nexport const makeMovieSearchApiReguest = async (value) => {\n    const response = await axios.get(`search/movie?api_key=${process.env.REACT_APP_API_KEY}&language=en-US&page=1&query=${value}`)  \n    return response.data.results\n}\n"],"names":["MovieItem","styled","ItemTitle","NoResultsImage","ReviewsList","reviews","length","src","require","alt","map","author","content","id","movieId","useParams","useState","movieReviews","setMovieReviews","isLoading","setIsLoading","useEffect","onRequestHandler","makeReviewApiReguest","then","res","getMovieReviews","console","log","message","Loader","Spinner","color","width","visible","ariaLabel","axios","makeTrendingMoviesApiRequest","process","response","data","results","makeMovieApiReguest","makeCastApiReguest","cast","makeMovieSearchApiReguest","value"],"sourceRoot":""}