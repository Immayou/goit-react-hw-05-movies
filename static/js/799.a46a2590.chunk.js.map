{"version":3,"file":"static/js/799.a46a2590.chunk.js","mappings":"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","sources":["components/Spiner/Spiner.styled.js","components/Spiner/Spiner.jsx","components/ListOfMovies/ListOfMovies.styled.js","components/ListOfMovies/ListOfMovies.jsx","components/SearchBox/SearchBox.styled.js","components/SearchBox/SearchBox.jsx","pages/Movies/Movies.jsx","services/api.js"],"sourcesContent":["import styled from \"@emotion/styled\"\n\nexport const Loader = styled.div`\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%)\n`","import { FallingLines } from 'react-loader-spinner';\nimport { Loader } from '../Spiner/Spiner.styled';\n\nexport const Spinner = () => {\n  return (\n    <Loader>\n      <FallingLines\n        color=\"#000\"\n        width=\"200\"\n        visible={true}\n        ariaLabel=\"falling-lines-loading\"\n      />\n    </Loader>\n  );\n};\n","import styled from \"@emotion/styled\";\n\nexport const MoviesList = styled.ul`\ndisplay:grid;\ngrid-template-columns: repeat(1, 1fr);\n/* grid-template-rows: repeat(3, 1fr); */\ngrid-column-gap: 10px;\ngrid-row-gap: 10px;\n@media screen and (min-width: 450px) {\ngrid-template-columns: repeat(2, 1fr);\ngrid-template-rows: repeat(2, 1fr);\n}\n@media screen and (min-width: 768px) {\ngrid-template-columns: repeat(4, 1fr);\ngrid-template-rows: repeat(3, 1fr);\n}\n`\nexport const PosterPicture = styled.img`\nheight: 400px;\nborder-radius: 5px;\nbox-shadow: 0 12px 16px 0 rgba(0,0,0,0.24),0 17px 50px 0 rgba(0,0,0,0.19);\n`\n\nexport const MovieTitle = styled.h2`\nfont-size: 17px;\nfont-style: oblique;\n`\nexport const EmptySubmitAlarmMessage = styled.p`\nfont-size: 20px;\nfont-style: italic;\nopacity: 0.6;\n`","import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport notFoundImageUrl from '../../img/no-img-avaliable.jpg';\nimport {\n  MoviesList,\n  MovieTitle,\n  PosterPicture,\n  EmptySubmitAlarmMessage,\n} from './ListOfMovies.styled';\n\nexport const ListOfMovies = ({ allMovies, isSubmited, searchQuery }) => {\n  const location = useLocation();\n  return (\n    <>\n      {allMovies.length > 0 && (\n        <MoviesList>\n          {allMovies.map(({ id, title, vote_average, poster_path }) => (\n            <li key={id}>\n              <Link to={`${id}`} state={{ from: location }}>\n                <PosterPicture\n                  src={\n                    poster_path\n                      ? `https://image.tmdb.org/t/p/w500${poster_path}`\n                      : notFoundImageUrl\n                  }\n                  alt={`${title}`}\n                />\n              </Link>\n              <MovieTitle>{title}</MovieTitle>\n              <p>\n                User score:\n                {Number(vote_average) !== 0\n                  ? (Number(vote_average) * 10).toFixed(0) + '%'\n                  : 'No information'}\n              </p>\n            </li>\n          ))}\n        </MoviesList>\n      )}\n      {allMovies.length === 0 && isSubmited && searchQuery !== '' && (\n        <EmptySubmitAlarmMessage>\n          The query you requested could not be found!\n        </EmptySubmitAlarmMessage>\n      )}\n      {allMovies.length === 0 && isSubmited && searchQuery === '' && (\n        <EmptySubmitAlarmMessage>\n          Enter your query, please!\n        </EmptySubmitAlarmMessage>\n      )}\n    </>\n  );\n};\n\nListOfMovies.propTypes = {\n  allMovies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      title: PropTypes.string,\n      poster_path: PropTypes.string,\n      vote_average: PropTypes.number,\n    }).isRequired\n  ).isRequired,\n  isSubmited: PropTypes.bool.isRequired,\n  searchQuery: PropTypes.string.isRequired,\n};\n","import styled from \"@emotion/styled\"\n\nexport const SearchForm = styled.form`\ndisplay: flex;\njustify-content: center;\nalign-items: center;\nmargin-bottom: 20px;\nmax-width: 500px;\nbackground-color: rgba(223, 173, 173, 0.711);\nborder-radius: 5px;\nborder: 1px outset rgba(143, 7, 7, 0.9);\nbox-shadow: 0 12px 16px 0 rgba(0,0,0,0.24),0 17px 50px 0 rgba(0,0,0,0.19);\n`\n\nexport const SearchFormButton = styled.button`\ndisplay: inline-block;\nwidth: 50px;\nheight: 50px;\nopacity: 0.6;\nflex-shrink:0;\nborder-top-right-radius: 5px;\nborder-bottom-right-radius: 5px;\ntransition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n&:hover {\nopacity: 1;\n}\n`\nexport const SearchFormInput = styled.input`\ndisplay: inline-block;\nwidth: 100%;\nheight: 100%;\nfont: inherit;\nfont-size: 20px;\nbackground-color: transparent;\nborder: none;\noutline: none;\npadding: 0 4px;\n&::placeholder {\nfont: inherit;\nfont-size: 18px;\n}\n`\n\nexport const EmptySubmitAlarmMessage = styled.p`\nfont-size: 20px;\nfont-style: italic;\nopacity: 0.6;\n`","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { FiLoader } from 'react-icons/fi';\nimport {\n  SearchForm,\n  SearchFormButton,\n  SearchFormInput,\n} from './SearchBox.styled';\n\nexport const SearchBox = ({ onChange }) => {\n  const [inputQuery, setInputQuery] = useState('');\n\n  const inputHandler = e => {\n    setInputQuery(e.currentTarget.value.toLowerCase());\n  };\n\n  const formSubmitHandler = e => {\n    e.preventDefault();\n    onChange(inputQuery);\n  };\n\n  return (\n    <SearchForm onSubmit={formSubmitHandler}>\n      <SearchFormInput\n        type=\"text\"\n        autoComplete=\"off\"\n        autoFocus\n        placeholder=\"Search movies by title\"\n        onChange={inputHandler}\n      />\n      <SearchFormButton type=\"submit\">\n        <FiLoader size=\"20px\" />\n      </SearchFormButton>\n    </SearchForm>\n  );\n};\n\nSearchBox.propTypes = {\n  onChange: PropTypes.func.isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { makeMovieSearchApiReguest } from '../../services/api';\nimport { ListOfMovies } from '../../components/ListOfMovies/ListOfMovies';\nimport { SearchBox } from '../../components/SearchBox/SearchBox';\nimport { Spinner } from '../../components/Spiner/Spiner';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [isSubmited, setIsSubmited] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') ?? '';\n\n  useEffect(() => {\n    if (query === '') {\n      setMovies([]);\n      return;\n    }\n\n    const onRequestHandler = async () => {\n      try {\n        setIsLoading(true);\n        const getMoviesByQuery = await makeMovieSearchApiReguest(query).then(\n          res => res\n        );\n        const getMoviesInfo = await getMoviesByQuery.map(\n          ({ id, title, vote_average, poster_path }) => {\n            return { title, id, vote_average, poster_path };\n          }\n        );\n        setMovies(getMoviesInfo);\n        setIsLoading(false);\n      } catch (error) {\n        console.log(error.message);\n      }\n    };\n    onRequestHandler();\n  }, [query]);\n\n  const queryHandler = value => {\n    setIsSubmited(true);\n    setSearchParams(value.trim() !== '' ? { query: value } : {});\n  };\n\n  return (\n    <>\n      <main>\n        <section>\n          <SearchBox onChange={queryHandler} disabled={isLoading} />\n          {isLoading ? (\n            <Spinner />\n          ) : (\n            <ListOfMovies\n              allMovies={movies}\n              isSubmited={isSubmited}\n              searchQuery={query}\n            />\n          )}\n        </section>\n      </main>\n    </>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const makeTrendingMoviesApiRequest = async signal => {\n  const response = await axios.get(\n    `trending/all/day?api_key=${process.env.REACT_APP_API_KEY}`,\n    { signal: signal }\n  );\n  return await response.data.results;\n};\n\nexport const makeMovieApiReguest = async id => {\n  const response = await axios.get(\n    `movie/${id}?api_key=${process.env.REACT_APP_API_KEY}&language=en-US`\n  );\n  return await response.data;\n};\n\nexport const makeCastApiReguest = async id => {\n  const response = await axios.get(\n    `movie/${id}/credits?api_key=${process.env.REACT_APP_API_KEY}&language=en-US`\n  );\n  return await response.data.cast;\n};\n\nexport const makeReviewApiReguest = async id => {\n  const response = await axios.get(\n    `movie/${id}/reviews?api_key=${process.env.REACT_APP_API_KEY}&language=en-US&page=1`\n  );\n  return response.data.results;\n};\n\nexport const makeMovieSearchApiReguest = async value => {\n  const response = await axios.get(\n    `search/movie?api_key=${process.env.REACT_APP_API_KEY}&language=en-US&page=1&query=${value}`\n  );\n  return response.data.results;\n};\n"],"names":["Loader","styled","Spinner","color","width","visible","ariaLabel","MoviesList","PosterPicture","MovieTitle","EmptySubmitAlarmMessage","ListOfMovies","allMovies","isSubmited","searchQuery","location","useLocation","length","map","id","title","vote_average","poster_path","to","state","from","src","notFoundImageUrl","alt","Number","toFixed","SearchForm","SearchFormButton","SearchFormInput","SearchBox","onChange","useState","inputQuery","setInputQuery","onSubmit","e","preventDefault","type","autoComplete","autoFocus","placeholder","currentTarget","value","toLowerCase","size","movies","setMovies","setIsSubmited","isLoading","setIsLoading","useSearchParams","searchParams","setSearchParams","query","get","useEffect","onRequestHandler","makeMovieSearchApiReguest","then","res","getMoviesByQuery","getMoviesInfo","console","log","message","trim","disabled","axios","makeTrendingMoviesApiRequest","signal","process","response","data","results","makeMovieApiReguest","makeCastApiReguest","cast","makeReviewApiReguest"],"sourceRoot":""}