{"version":3,"file":"static/js/387.abe517ee.chunk.js","mappings":"iSAEaA,EAAWC,EAAAA,EAAAA,GAAH,4dAoBRC,EAAmBD,EAAAA,EAAAA,IAAH,oRAahBE,EAAgBF,EAAAA,EAAAA,EAAH,qFAKbG,EAAYH,EAAAA,EAAAA,EAAH,6C,SCEtB,EApCa,WACX,IAAOI,GAAWC,EAAAA,EAAAA,MAAXD,QACP,GAAkCE,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,WAEN,IAAMC,EAAgB,mCAAG,oGAErBF,GAAa,GAFQ,UAGMG,EAAAA,EAAAA,IAAmBT,GAASU,MAAK,SAAAC,GAAG,OAAIA,CAAJ,IAH1C,OAGfC,EAHe,OAIrBR,EAAaQ,GACbN,GAAa,GALQ,gDAOrBO,QAAQC,IAAI,KAAMC,SAPG,yDAAH,qDAUtBP,GACC,GAAE,CAACR,KAGN,gCACCG,IACE,SAACR,EAAD,UACAQ,EAAUa,KAAI,gBAAEC,EAAF,EAAEA,UAAWC,EAAb,EAAaA,GAAIC,EAAjB,EAAiBA,aAAcC,EAA/B,EAA+BA,KAA/B,OACf,2BACI,SAACvB,EAAD,CAAkBwB,IAAKF,EAAY,yCAAqCA,GAAiBG,EAAQ,MAAmCC,IAAG,UAAKH,MAC5I,SAACtB,EAAD,UAAgBsB,KAChB,UAACrB,EAAD,yBAAuBkB,OAHlBC,EADM,MAOdb,IAAa,SAAC,IAAD,MAGnB,C,gFCtCYmB,E,QAAS5B,EAAAA,IAAH,sG,SCCN6B,EAAU,WACnB,OACE,SAACD,EAAD,WACE,SAAC,KAAD,CACCE,MAAM,OACNC,MAAM,MACNC,SAAS,EACTC,UAAU,2BAIhB,C,2KCZHC,EAAAA,GAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAmB,mCAAG,WAAOb,GAAP,uFACRY,EAAAA,GAAAA,IAAA,gBAAmBZ,EAAnB,oBAAiCc,mCAAjC,oBADQ,cACzBC,EADyB,gBAElBA,EAASC,KAFS,mFAAH,sDAKnBzB,EAAkB,mCAAG,WAAOS,GAAP,uFACPY,EAAAA,GAAAA,IAAA,gBAAmBZ,EAAnB,4BAAyCc,mCAAzC,oBADO,cACxBC,EADwB,gBAEjBA,EAASC,KAAKC,KAFG,mFAAH,sDAKlBC,EAAoB,mCAAG,WAAOlB,GAAP,uFACTY,EAAAA,GAAAA,IAAA,gBAAmBZ,EAAnB,4BAAyCc,mCAAzC,2BADS,cAC1BC,EAD0B,yBAEzBA,EAASC,KAAKG,SAFW,2CAAH,sDAKpBC,EAAyB,mCAAG,WAAOC,GAAP,uFACdT,EAAAA,GAAAA,IAAA,+BAAkCE,mCAAlC,wCAA+FO,IADjF,cAC/BN,EAD+B,yBAE9BA,EAASC,KAAKG,SAFgB,2CAAH,qD","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","components/Spiner/Spiner.styled.js","components/Spiner/Spiner.jsx","services/api.js"],"sourcesContent":["import styled from \"@emotion/styled\";\n\nexport const CastList = styled.ul`\ndisplay:grid;\ngrid-column-gap: 10px;\ngrid-row-gap: 10px;\ngrid-template-columns: (1, 1fr); \nmargin-bottom: 10px;\n\n@media screen and (min-width: 450px) {\ngrid-template-columns: repeat(2, 1fr);\n}\n@media screen and (min-width: 768px) {\ngrid-template-columns: repeat(3, 1fr);\n}\n@media screen and (min-width: 850px) {\ngrid-template-columns: repeat(4, 1fr);\n}\n@media screen and (min-width: 1200px) {\ngrid-template-columns: repeat(6, 1fr);\n}\n`\nexport const CharacterPicture = styled.img`\nheight: 300px;\nmargin: 0 auto;\nborder-radius: 5px;\nbox-shadow: 0 12px 16px 0 rgba(0,0,0,0.24),0 17px 50px 0 rgba(0,0,0,0.19);\n/* @media screen and (max-width: 450px) {\nwidth: 200px;\n} */\n@media screen and (max-width: 768px) {\nwidth: 200px;\n}\n`\n\nexport const CharacterName = styled.p`\ntext-align: center;\nfont-size: 17px;\nfont-style: oblique;\n`\nexport const Character = styled.p`\ntext-align: center;\n`\n","import { useState, useEffect } from \"react\"\nimport { useParams } from \"react-router-dom\"\nimport { makeCastApiReguest } from \"../../services/api\"\nimport { Spinner } from \"../../components/Spiner/Spiner\"\nimport { CastList, CharacterPicture, CharacterName, Character } from \"./Cast.styled\"\n\nconst Cast = () => {\n  const {movieId} = useParams()\n  const [movieCast, setMovieCast] = useState([])\n  const [isLoading, setIsLoading] = useState(false)\n\n  useEffect(() => {\n\n      const onRequestHandler = async () => {\n        try {\n          setIsLoading(true)\n          const getMovieCast = await makeCastApiReguest(movieId).then(res => res)\n          setMovieCast(getMovieCast)\n          setIsLoading(false)\n        } catch (error) {\n          console.log(error.message)\n        }\n      }\n      onRequestHandler()\n      }, [movieId])\n\n  return (\n    <>\n    {movieCast &&\n      (<CastList> \n      {movieCast.map(({character, id, profile_path, name}) => (\n      <li key={id}>\n          <CharacterPicture src={profile_path ? `https://image.tmdb.org/t/p/w500${profile_path}` : require('../../img/no-img-avaliable.jpg')} alt={`${name}`} />\n          <CharacterName>{name}</CharacterName>\n          <Character>Character: {character}</Character>\n          </li>))}\n      </CastList>)}\n      {isLoading && <Spinner />}\n    </>\n  )\n}\n\nexport default Cast\n\n\n\n","import styled from \"@emotion/styled\"\n\nexport const Loader = styled.div`\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%)\n`","import { FallingLines } from 'react-loader-spinner'\nimport { Loader } from \"../Spiner/Spiner.styled\";\n\nexport const Spinner = () => {\n    return (\n      <Loader>\n        <FallingLines\n         color='#000'\n         width=\"200\"\n         visible={true}\n         ariaLabel='falling-lines-loading'\n        />\n      </Loader>\n    );\n  };\n\n","import axios from \"axios\"\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/'\n\nexport const makeMovieApiReguest = async (id) => {\n    const response = await axios.get(`movie/${id}?api_key=${process.env.REACT_APP_API_KEY}&language=en-US`)\n    return await response.data\n}\n\nexport const makeCastApiReguest = async (id) => {\n    const response = await axios.get(`movie/${id}/credits?api_key=${process.env.REACT_APP_API_KEY}&language=en-US`)\n    return await response.data.cast\n}\n\nexport const makeReviewApiReguest = async (id) => {\n    const response = await axios.get(`movie/${id}/reviews?api_key=${process.env.REACT_APP_API_KEY}&language=en-US&page=1`)  \n    return response.data.results\n}\n\nexport const makeMovieSearchApiReguest = async (value) => {\n    const response = await axios.get(`search/movie?api_key=${process.env.REACT_APP_API_KEY}&language=en-US&page=1&query=${value}`)  \n    return response.data.results\n}\n"],"names":["CastList","styled","CharacterPicture","CharacterName","Character","movieId","useParams","useState","movieCast","setMovieCast","isLoading","setIsLoading","useEffect","onRequestHandler","makeCastApiReguest","then","res","getMovieCast","console","log","message","map","character","id","profile_path","name","src","require","alt","Loader","Spinner","color","width","visible","ariaLabel","axios","makeMovieApiReguest","process","response","data","cast","makeReviewApiReguest","results","makeMovieSearchApiReguest","value"],"sourceRoot":""}