{"version":3,"file":"static/js/400.625c8b36.chunk.js","mappings":"6SAEaA,EAAgBC,EAAAA,EAAAA,GAAH,sgBAoBbC,EAAmBD,EAAAA,EAAAA,IAAH,kPAYhBE,EAAgBF,EAAAA,EAAAA,EAAH,2FAKbG,EAAYH,EAAAA,EAAAA,EAAH,+CAITI,EAAiBJ,EAAAA,EAAAA,IAAH,4E,SChCdK,EAAW,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACzB,OACE,8BACwB,IAArBA,EAAUC,QACT,SAACH,EAAD,CAAgBI,IAAKC,EAAcC,IAAI,uBAEvC,SAACX,EAAD,UACGO,EAAUK,KAAI,gBAAGC,EAAH,EAAGA,UAAWC,EAAd,EAAcA,GAAIC,EAAlB,EAAkBA,aAAcC,EAAhC,EAAgCA,KAAhC,OACb,2BACE,SAACd,EAAD,CACEO,IACEM,EAAY,yCAC0BA,GAClCE,EAENN,IAAG,UAAKK,MAEV,SAACb,EAAD,UAAgBa,KAChB,UAACZ,EAAD,yBAAuBS,OAVhBC,EADI,OAkBxB,E,UCRD,EAtBa,WACX,IAAQI,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCE,EAAAA,EAAAA,UAAS,IAA3C,eAAOb,EAAP,KAAkBc,EAAlB,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KAgBA,OAdAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAgB,mCAAG,oGAErBF,GAAa,GAFQ,UAGMG,EAAAA,EAAAA,IAAmBR,GAASS,MAAK,SAAAC,GAAG,OAAIA,CAAJ,IAH1C,OAGfC,EAHe,OAIrBR,EAAaQ,GACbN,GAAa,GALQ,gDAOrBO,QAAQC,IAAI,KAAMC,SAPG,yDAAH,qDAUtBP,GACD,GAAE,CAACP,KAEG,8BAAGI,GAAY,SAAC,IAAD,KAAc,SAAChB,EAAD,CAAUC,UAAWA,KAC1D,C,gFCxBY0B,E,QAAShC,EAAAA,IAAH,sG,SCCNiC,EAAU,WACrB,OACE,SAACD,EAAD,WACE,SAAC,KAAD,CACEE,MAAM,OACNC,MAAM,MACNC,SAAS,EACTC,UAAU,2BAIjB,C,mMCZDC,EAAAA,GAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAA4B,mCAAG,WAAMC,GAAN,uFACnBF,EAAAA,GAAAA,IAAA,mCACOG,oCAC5B,CAAED,OAAQA,IAH8B,cACpCE,EADoC,gBAK7BA,EAASC,KAAKC,QALe,mFAAH,sDAQ5BC,EAAmB,mCAAG,WAAMhC,GAAN,uFACVyB,EAAAA,GAAAA,IAAA,gBACZzB,EADY,oBACE4B,mCADF,oBADU,cAC3BC,EAD2B,gBAIpBA,EAASC,KAJW,mFAAH,sDAOnBlB,EAAkB,mCAAG,WAAMZ,GAAN,uFACTyB,EAAAA,GAAAA,IAAA,gBACZzB,EADY,4BACU4B,mCADV,oBADS,cAC1BC,EAD0B,gBAInBA,EAASC,KAAKG,KAJK,mFAAH,sDAOlBC,EAAoB,mCAAG,WAAMlC,GAAN,uFACXyB,EAAAA,GAAAA,IAAA,gBACZzB,EADY,4BACU4B,mCADV,2BADW,cAC5BC,EAD4B,yBAI3BA,EAASC,KAAKC,SAJa,2CAAH,sDAOpBI,EAAyB,mCAAG,WAAMC,GAAN,uFAChBX,EAAAA,GAAAA,IAAA,+BACGG,mCADH,wCACgEQ,IAFhD,cACjCP,EADiC,yBAIhCA,EAASC,KAAKC,SAJkB,2CAAH,qD","sources":["components/CastList/CastList.styled.js","components/CastList/CastList.jsx","components/Cast/Cast.jsx","components/Spiner/Spiner.styled.js","components/Spiner/Spiner.jsx","services/api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const CastMovieList = styled.ul`\n  display: grid;\n  grid-column-gap: 10px;\n  grid-row-gap: 10px;\n  grid-template-columns: (1, 1fr);\n  margin-bottom: 10px;\n\n  @media screen and (min-width: 450px) {\n    grid-template-columns: repeat(2, 1fr);\n  }\n  @media screen and (min-width: 768px) {\n    grid-template-columns: repeat(3, 1fr);\n  }\n  @media screen and (min-width: 850px) {\n    grid-template-columns: repeat(4, 1fr);\n  }\n  @media screen and (min-width: 1200px) {\n    grid-template-columns: repeat(6, 1fr);\n  }\n`;\nexport const CharacterPicture = styled.img`\n  height: 300px;\n  margin: 0 auto;\n  border-radius: 5px;\n  box-shadow: 0 12px 16px 0 rgba(0, 0, 0, 0.24),\n    0 17px 50px 0 rgba(0, 0, 0, 0.19);\n\n  @media screen and (max-width: 768px) {\n    width: 200px;\n  }\n`;\n\nexport const CharacterName = styled.p`\n  text-align: center;\n  font-size: 17px;\n  font-style: oblique;\n`;\nexport const Character = styled.p`\n  text-align: center;\n`;\n\nexport const NoResultsImage = styled.img`\n  margin: 0 auto;\n  width: 35%;\n  height: 300px;\n`;\n","import PropTypes from 'prop-types';\nimport noResultsUrl from '../../img/sorry-no-results.png';\nimport notFoundImageUrl from '../../img/no-img-avaliable.jpg';\nimport {\n  CastMovieList,\n  CharacterPicture,\n  CharacterName,\n  Character,\n  NoResultsImage,\n} from './CastList.styled';\n\nexport const CastList = ({ movieCast }) => {\n  return (\n    <>\n      {movieCast.length === 0 ? (\n        <NoResultsImage src={noResultsUrl} alt=\"Sorry, no results\" />\n      ) : (\n        <CastMovieList>\n          {movieCast.map(({ character, id, profile_path, name }) => (\n            <li key={id}>\n              <CharacterPicture\n                src={\n                  profile_path\n                    ? `https://image.tmdb.org/t/p/w500${profile_path}`\n                    : notFoundImageUrl\n                }\n                alt={`${name}`}\n              />\n              <CharacterName>{name}</CharacterName>\n              <Character>Character: {character}</Character>\n            </li>\n          ))}\n        </CastMovieList>\n      )}\n    </>\n  );\n};\n\nCastList.propTypes = {\n  movieCast: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      character: PropTypes.string,\n      profile_path: PropTypes.string,\n      name: PropTypes.string,\n    }).isRequired\n  ).isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { makeCastApiReguest } from '../../services/api';\nimport { CastList } from '../../components/CastList/CastList';\nimport { Spinner } from '../../components/Spiner/Spiner';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [movieCast, setMovieCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const onRequestHandler = async () => {\n      try {\n        setIsLoading(true);\n        const getMovieCast = await makeCastApiReguest(movieId).then(res => res);\n        setMovieCast(getMovieCast);\n        setIsLoading(false);\n      } catch (error) {\n        console.log(error.message);\n      }\n    };\n    onRequestHandler();\n  }, [movieId]);\n\n  return <>{isLoading ? <Spinner /> : <CastList movieCast={movieCast} />}</>;\n};\n\nexport default Cast;\n","import styled from \"@emotion/styled\"\n\nexport const Loader = styled.div`\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%)\n`","import { FallingLines } from 'react-loader-spinner';\nimport { Loader } from '../Spiner/Spiner.styled';\n\nexport const Spinner = () => {\n  return (\n    <Loader>\n      <FallingLines\n        color=\"#000\"\n        width=\"200\"\n        visible={true}\n        ariaLabel=\"falling-lines-loading\"\n      />\n    </Loader>\n  );\n};\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const makeTrendingMoviesApiRequest = async signal => {\n  const response = await axios.get(\n    `trending/all/day?api_key=${process.env.REACT_APP_API_KEY}`,\n    { signal: signal }\n  );\n  return await response.data.results;\n};\n\nexport const makeMovieApiReguest = async id => {\n  const response = await axios.get(\n    `movie/${id}?api_key=${process.env.REACT_APP_API_KEY}&language=en-US`\n  );\n  return await response.data;\n};\n\nexport const makeCastApiReguest = async id => {\n  const response = await axios.get(\n    `movie/${id}/credits?api_key=${process.env.REACT_APP_API_KEY}&language=en-US`\n  );\n  return await response.data.cast;\n};\n\nexport const makeReviewApiReguest = async id => {\n  const response = await axios.get(\n    `movie/${id}/reviews?api_key=${process.env.REACT_APP_API_KEY}&language=en-US&page=1`\n  );\n  return response.data.results;\n};\n\nexport const makeMovieSearchApiReguest = async value => {\n  const response = await axios.get(\n    `search/movie?api_key=${process.env.REACT_APP_API_KEY}&language=en-US&page=1&query=${value}`\n  );\n  return response.data.results;\n};\n"],"names":["CastMovieList","styled","CharacterPicture","CharacterName","Character","NoResultsImage","CastList","movieCast","length","src","noResultsUrl","alt","map","character","id","profile_path","name","notFoundImageUrl","movieId","useParams","useState","setMovieCast","isLoading","setIsLoading","useEffect","onRequestHandler","makeCastApiReguest","then","res","getMovieCast","console","log","message","Loader","Spinner","color","width","visible","ariaLabel","axios","makeTrendingMoviesApiRequest","signal","process","response","data","results","makeMovieApiReguest","cast","makeReviewApiReguest","makeMovieSearchApiReguest","value"],"sourceRoot":""}